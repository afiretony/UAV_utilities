% Read data from .ulg file
% Carnegie Mellon University - Cerlab UAV Group
% Chenhao Yang
clc; clear; close all;
% Load the ULOG file. Specify the relative path of the file.
ulog = ulogreader('log_227_2021-12-28-17-33-58.ulg');

% Read all topic messages.
msg = readTopicMsgs(ulog);

% Specify the time interval between which to select messages.
d1 = ulog.StartTime;
% d2 = d1 + duration([0 0 10],'Format','hh:mm:ss.SSSSSS');
d2 = ulog.EndTime;

% Read messages from the topic in the time interval [d1 d2].
% ref: https://docs.px4.io/master/en/concept/mixing.html
% #Control Group #3 (Manual Passthrough)
% 3: RC throttle
% 4: RC mode switch (Passthrough of RC channel mapped by RC_MAP_FLAPS)
data = readTopicMsgs(ulog,'TopicNames',{'actuator_controls_3'}, ... 
'InstanceID',{0},'Time',[d1 d2]);
% Extract topic messages for the topic.
Manual = data.TopicMessages{1,1};
Manual_control = Manual.control;
Manual_throttle = Manual_control(:,4);

% Control Group #1 (Flight Control VTOL/Alternate)
% 3: throttle ALT (0..1 normal range, -1..1 for variable pitch / thrust reversers)
data = readTopicMsgs(ulog,'TopicNames',{'actuator_controls_0'}, ... 
'InstanceID',{0},'Time',[d1 d2]);
FC = data.TopicMessages{1,1};
FC_control = FC.control;
FC_throttle = FC_control(:,4);

data = readTopicMsgs(ulog,'TopicNames',{'estimator_local_position'}, ... 
'InstanceID',{0},'Time',[d1 d2]);
est_local_pos0 = data.TopicMessages{1,1};

data = readTopicMsgs(ulog,'TopicNames',{'estimator_local_position'}, ... 
'InstanceID',{1},'Time',[d1 d2]);
est_local_pos1 = data.TopicMessages{1,1};

data = readTopicMsgs(ulog,'TopicNames',{'estimator_local_position'}, ... 
'InstanceID',{2},'Time',[d1 d2]);
est_local_pos2 = data.TopicMessages{1,1};

data = readTopicMsgs(ulog,'TopicNames',{'vehicle_attitude_setpoint'}, ... 
'InstanceID',{0},'Time',[d1 d2]);
atti_setpoint = data.TopicMessages{1,1};

data = readTopicMsgs(ulog,'TopicNames',{'hover_thrust_estimate'}, ... 
'InstanceID',{0},'Time',[d1 d2]);
hover_thrust_estimate = data.TopicMessages{1,1};

data = readTopicMsgs(ulog,'TopicNames',{'vehicle_imu'}, ... 
'InstanceID',{0},'Time',[d1 d2]);
imu = data.TopicMessages{1,1};

%% plotting - Throttle
figure("Units","normalized","Position",[0.2,0.5,0.6,0.4]);
hold on;
t = FC.timestamp;
plot(t,FC_throttle,'LineWidth',2);
t = Manual.timestamp;
plot(t, Manual_throttle,'LineWidth',2);
legend('flight control throttle','manual throttle','Location','northwest');

set(gca, ... 
        'XGrid', 'on', ...
        'YGrid', 'on', ...
        'GridLineStyle', '--', ...
        'LineWidth', 0.5, ...
        'GridAlpha', 0.5, ...
        'XMinorGrid', 'on' , ...
        'YMinorGrid', 'on', ...
        'MinorGridLineStyle', ':', ...
        'FontName', 'Times New Roman', ...
        'FontSize', 12, ...
        'FontAngle', 'italic')
    
% set the axes labels' properties
xlabel(gca, 'Time, $[s]$ ', ...
        'Interpreter', 'latex', ...
        'FontName', 'Times New Roman', ...
        'FontSize', 14)
ylabel(gca, 'Control effort', ...
        'Interpreter', 'latex', ...
        'FontName', 'Times New Roman', ...
        'FontSize', 14)

%% plotting - estimated local position z
figure("Units","normalized","Position",[0.2,0.5,0.6,0.4]);
hold on;
t = est_local_pos0.timestamp;
plot(t, est_local_pos0.z,'LineWidth',2);
plot(t, est_local_pos0.vz,'LineWidth',2);
% plot(t, est_local_pos0.dist_bottom,'LineWidth',2);
plot(t, est_local_pos1.z,'LineWidth',2);
plot(t, est_local_pos1.vz,'LineWidth',2);
% plot(t, est_local_pos1.dist_bottom,'LineWidth',2);
plot(t, est_local_pos2.z,'LineWidth',2);
plot(t, est_local_pos2.vz,'LineWidth',2);
% plot(t, est_local_pos2.dist_bottom,'LineWidth',2);
legend('estimate z 0','estimate vz 0','estimate z 1','estimate vz 1',...
    'estimate v 2','estimate vz 2', 'Location','northwest');

set(gca, ... 
        'XGrid', 'on', ...
        'YGrid', 'on', ...
        'GridLineStyle', '--', ...
        'LineWidth', 0.5, ...
        'GridAlpha', 0.5, ...
        'XMinorGrid', 'on' , ...
        'YMinorGrid', 'on', ...
        'MinorGridLineStyle', ':', ...
        'FontName', 'Times New Roman', ...
        'FontSize', 12, ...
        'FontAngle', 'italic')
    
% set the axes labels' properties
xlabel(gca, 'Time, $[s]$ ', ...
        'Interpreter', 'latex', ...
        'FontName', 'Times New Roman', ...
        'FontSize', 14)
ylabel(gca, 'Local position estimate in Z', ...
        'Interpreter', 'latex', ...
        'FontName', 'Times New Roman', ...
        'FontSize', 14)
%% Plotting  - attitude setpoint
figure("Units","normalized","Position",[0.2,0.5,0.6,0.4]);
hold on;
t = atti_setpoint.timestamp;
plot(t, -atti_setpoint.thrust_body,'LineWidth',2);

% legend('flight control throttle','manual throttle','Location','northwest');

set(gca, ... 
        'XGrid', 'on', ...
        'YGrid', 'on', ...
        'GridLineStyle', '--', ...
        'LineWidth', 0.5, ...
        'GridAlpha', 0.5, ...
        'XMinorGrid', 'on' , ...
        'YMinorGrid', 'on', ...
        'MinorGridLineStyle', ':', ...
        'FontName', 'Times New Roman', ...
        'FontSize', 12, ...
        'FontAngle', 'italic')
    
% set the axes labels' properties
xlabel(gca, 'Time, $[s]$ ', ...
        'Interpreter', 'latex', ...
        'FontName', 'Times New Roman', ...
        'FontSize', 14)
ylabel(gca, 'Vehicle attitude setpoint - thrust body', ...
        'Interpreter', 'latex', ...
        'FontName', 'Times New Roman', ...
        'FontSize', 14)

%% Plotting  - hovor thrust estimate
figure("Units","normalized","Position",[0.2,0.5,0.6,0.4]);
hold on;
t = hover_thrust_estimate.timestamp;
yyaxis left
plot(t, hover_thrust_estimate.hover_thrust,'LineWidth',2);
yyaxis right
plot(t, hover_thrust_estimate.valid,'LineWidth',2);
legend('hover thrust estimate','Location','northwest');

set(gca, ... 
        'XGrid', 'on', ...
        'YGrid', 'on', ...
        'GridLineStyle', '--', ...
        'LineWidth', 0.5, ...
        'GridAlpha', 0.5, ...
        'XMinorGrid', 'on' , ...
        'YMinorGrid', 'on', ...
        'MinorGridLineStyle', ':', ...
        'FontName', 'Times New Roman', ...
        'FontSize', 12, ...
        'FontAngle', 'italic')
    
% set the axes labels' properties
xlabel(gca, 'Time, $[s]$ ', ...
        'Interpreter', 'latex', ...
        'FontName', 'Times New Roman', ...
        'FontSize', 14)
ylabel(gca, 'Hover thrust estimate', ...
        'Interpreter', 'latex', ...
        'FontName', 'Times New Roman', ...
        'FontSize', 14)

%% Plotting  - imu
figure("Units","normalized","Position",[0.2,0.5,0.6,0.4]);
hold on;
t = imu.timestamp;
position = imu.delta_velocity*imu.timestamp;
yyaxis left
plot(t, imu.delta_velocity,'LineWidth',2);
% yyaxis right
% plot(t, hover_thrust_estimate.valid,'LineWidth',2);
% legend('hover thrust estimate','Location','northwest');

set(gca, ... 
        'XGrid', 'on', ...
        'YGrid', 'on', ...
        'GridLineStyle', '--', ...
        'LineWidth', 0.5, ...
        'GridAlpha', 0.5, ...
        'XMinorGrid', 'on' , ...
        'YMinorGrid', 'on', ...
        'MinorGridLineStyle', ':', ...
        'FontName', 'Times New Roman', ...
        'FontSize', 12, ...
        'FontAngle', 'italic')
    
% set the axes labels' properties
xlabel(gca, 'Time, $[s]$ ', ...
        'Interpreter', 'latex', ...
        'FontName', 'Times New Roman', ...
        'FontSize', 14)
ylabel(gca, 'Hover thrust estimate', ...
        'Interpreter', 'latex', ...
        'FontName', 'Times New Roman', ...
        'FontSize', 14)
%%  
% Read all system information.
systeminfo = readSystemInformation(ulog);
% 
% % Read all initial parameter values.
params = readParameters(ulog);
% 
% % Read all logged output messages.
loggedoutput = readLoggedOutput(ulog);
% 
% % Read logged output messages in the time interval.
log = readLoggedOutput(ulog,'Time',[d1 d2]);




